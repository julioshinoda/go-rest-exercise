// Code generated by mockery v2.32.3. DO NOT EDIT.

package rules

import (
	context "context"

	model "github.com/julioshinoda/go-rest-exercise/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: ctx, p
func (_m *MockProvider) CreateJob(ctx context.Context, p model.CreateJobRequest) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateJobRequest) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDepartment provides a mock function with given fields: ctx, p
func (_m *MockProvider) GetDepartment(ctx context.Context, p map[string]string) (model.Departments, error) {
	ret := _m.Called(ctx, p)

	var r0 model.Departments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (model.Departments, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) model.Departments); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(model.Departments)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobItem provides a mock function with given fields: ctx, p
func (_m *MockProvider) GetJobItem(ctx context.Context, p map[string]string) (model.Departments, error) {
	ret := _m.Called(ctx, p)

	var r0 model.Departments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (model.Departments, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) model.Departments); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(model.Departments)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
